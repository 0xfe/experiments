-- Project Euler: Problem 2
-- Author: Mohit Muthanna Cheppudira
--
-- Each new term in the Fibonacci sequence is generated by adding the previous
-- two terms. By starting with 1 and 2, the first 10 terms will be:
--
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
--
-- Find the sum of all the even-valued terms in the sequence which do not
-- exceed four million.

import System (getArgs)

-- Simple memoized Fibonacci sequence
fibs :: [Integer]
fibs = map genFib [0..]
  where
    genFib 0 = 0
    genFib 1 = 1
    genFib 2 = 2
    genFib x = (fibs !! (x - 1)) + (fibs !! (x - 2))

-- Solving Euler 2 for arbitrary limit
euler2 :: Integer -> Integer
euler2 limit = sum $ filter (not . odd) (takeWhile (<limit) fibs)

main :: IO ()
main = do
  a <- getArgs
  print $ euler2 $ if length a == 0 then 4000000 else read $ a !! 0
